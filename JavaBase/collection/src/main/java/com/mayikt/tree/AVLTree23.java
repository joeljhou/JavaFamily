package com.mayikt.tree;

/**
 * @author 周宇
 * @create 2022-02-19 15:49
 * 平衡二叉树：2-3查找树
 */
public class AVLTree23 {

    /**
     * 2-3查找树
     * 定义：
     *  2-节点：含有一个键和 2 条链，左链<键值  右链>键值
     *  3-节点：含有两个键和 3 条链  左链<键值  右链>键值   中链 两个键值中间
     *
     * 查找：
     * 和二叉查找树算法类似
     *
     * 插入：
     * 插入过程要保证平衡性
     *  (1)向2-节点插入新键
     *      把2-节点转变为3-节点，插入即可
     *  (2)向一颗只含一个3-节点的树中插入新键
     *      把3-节点转变为临时4-节点(3个键，4条链)
     *      分解4-节点，中键向上提升，自身转为两个2-节点
     *  (3)向一颗父节点为2-节点的3-节点中插入新键
     *      把3-节点转变为临时4-节点(3个键，4条链)
     *      分解4-节点，中键向上提升，自身转为两个2-节点，父节点转为3-节点
     *  (4)向一颗父节点为3-节点的3-节点中插入新键
     *      把3-节点转变为临时4-节点(3个键，4条链)
     *      分解4-节点，中键向上提升，自身转为两个2-节点，父节点转为临时4-节点
     *      分解父节点，中键向上提升，依次类推
     *  (5)分解根节点
     *      根节点转为临时4-节点后，中键向上提升，链接分解的两个2-节点
     *
     * 性质：
     *  (1) 任意空连接到根节点的长度都是相等的
     *  (2) 4-节点转为3-节点时，数的高度不会发生变化，只有当根节点是临时4-节点，分解跟节点，树高+1
     *  (3) 2-3树与普通二叉树的查找区别在于，普通二叉树自顶向下生长，2-3是自底向上生长
     */


}
